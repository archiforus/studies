# 190909 스터디
# import 
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
# 퍼셉트론 구현
#1. AND

def AND1(x1, x2):
  w1, w2, theta = .5, .5, .7
  tmp = x1*w1 + x2*w2
  if tmp <= theta:
    return 0
  elif tmp > theta:
    return 1
  
#1-1. AND(편향 b 고려)

def AND(x1, x2):
  x = np.array([x1, x2])
  w = np.array([.5, .5])
  b = -0.7
  tmp = np.sum(x*w) + b
  if tmp <= 0 :
    return 0
  else:
    return 1
  
#2. NAND

def NAND(x1, x2):
  x = np.array([x1, x2])
  w = np.array([-.5, -.5])
  b = 0.7
  tmp = np.sum(x*w) + b
  if tmp <= 0 :
    return 0
  else:
    return 1

#3. OR

def OR(x1, x2):
  x = np.array([x1, x2])
  w = np.array([.5, .5])
  b = -0.2
  tmp = np.sum(x*w) + b
  if tmp <= 0 :
    return 0
  else:
    return 1
  
#4. XOR

def XOR(x1, x2):
  s1 = NAND(x1, x2)
  s2 = OR(x1, x2)
  y = AND(s1, s2)
  return y

print(XOR(0,0))
print(XOR(1,0))
print(XOR(0,1))
print(XOR(1,1))

#신경망
#활성화 함수

#1.계단 함수 

def step_function(x):
  return np.array(x>0, dtype=np.int)

x = np.arange(-5.0, 5.0, 0.1)
y = step_function(x)

print(y)

plt.plot(x,y)
plt.ylim(-0.1, 1.1)
plt.show()

#2.시그모이드 함수

def sigmoid(x):
  return 1 / (1+np.exp(-x))
x=np.arange(-5, 5, .1)
y = sigmoid(x)
plt.plot(x,y)
plt.ylim(-0.1, 1.1)
plt.show()

#3.ReLU 함수

def ReLU(x):
  return np.maximum(0,x)
x=np.arange(-5, 5, .1)
y = ReLU(x)
plt.plot(x,y)
plt.ylim(-0.1, 1.1)
plt.show()

#4. Softmax 함수

def softmax(a):
  c = np.max(a)
  exp_a = np.exp(a-c) # 오버플로우를 막기 위해 변수값 중 최대 값을 빼준다.
  sum_exp_a = np.sum(exp_a)
  y = exp_a / sum_exp_a
  
  return y

a = np.array([.3, 2.9, 4.0])
y = softmax(a)
print(y)
print(np.sum(y))

# 3층 신경망 구현
def identity_function(x):
  return x


def init_network():
  network = {}
  network['w1'] = np.array([[.1,.3,.5],[.2,.4,.6]])
  network['b1'] = np.array([.1,.2,.3])
  network['w2'] = np.array([[.1,.4],[.2,.5],[.3,.6]])
  network['b2'] = np.array([.1,.2])
  network['w3'] = np.array([[.1,.3],[.2,.4]])
  network['b3'] = np.array([.1,.2])
  
  return network

def forward(network, x):
  w1, w2, w3 = network['w1'], network['w2'], network['w3']
  b1, b2, b3 = network['b1'], network['b2'], network['b3']
  
  a1 = np.dot(x, w1) +b1
  z1 = sigmoid(a1)
  a2 = np.dot(z1, w2) +b2
  z2 = sigmoid(a2)
  a3 = np.dot(z2, w3) + b3
  y = identity_function(a3)
  
  return y

network = init_network()
x = np.array([1.0, 0.5])
y = forward(network, x)
print(y)


